{%-for item in classes-%}
from {{project_name}}.dto.{{item.name}} import {{ item.name.capitalize() }}In, {{ item.name.capitalize() }}Out, {{ item.name.capitalize() }}Update
from {{project_name}}.api.db import {{ item.name.lower() }}s
{% endfor %}
from {{project_name}}.api.db import database
{%for item in classes-%}
async def add_{{ item.name.lower() }}(payload: {{ item.name.capitalize() }}In):
    query = {{ item.name.lower() }}s.insert().values(**payload.dict())
    return await database.execute(query=query)

async def get_all_{{ item.name.lower() }}s():
    query = {{ item.name.lower() }}s.select()
    return await database.fetch_all(query=query)

async def get_{{ item.name.lower() }}(id):
    query = {{ item.name.lower() }}s.select({{ item.name.lower() }}s.c.id==id)
    return await database.fetch_one(query=query)

async def delete_{{ item.name.lower() }}(id: int):
    query = {{ item.name.lower() }}s.delete().where({{ item.name.lower() }}s.c.id==id)
    return await database.execute(query=query)

async def update_{{ item.name.lower() }}(id: int, payload: {{ item.name.capitalize() }}In):
    query = (
        {{ item.name.lower() }}s
        .update()
        .where({{ item.name.lower() }}s.c.id == id)
        .values(**payload.dict())
    )
    return await database.execute(query=query)
{% endfor %}